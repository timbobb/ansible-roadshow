- hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - vars/vars.yml
  tasks:
  - name: Download Tower user data file
    get_url:
      url: https://raw.githubusercontent.com/mglantz/ansible-roadshow/master/content/scripts/tower-prep.sh
      dest: /tmp/tower-prep.sh
      validate_certs: no
      force: yes
      
  - name: Create empty file to store tower servers public IPs
    file:
      path: "./tower_servers.out"
      state: touch
      
  - name: Ensure a security group for Ansible Tower servers is in place
    ec2_group:
      name: "{{ ec2_security_group_tower }}"
      description: Security Group for Ansible Tower servers
      region: "{{ ec2_region }}"
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 8080
          to_port: 8080
          cidr_ip: 0.0.0.0/0
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0
          
   - name: Provision Ansible Tower
    ec2:
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      key_name: "{{ec2_key}}"
      region: "{{ ec2_region }}"
      group: "{{ ec2_security_group_tower }}"
      instance_type: t2.medium
      image: "{{ ami_id }}"
      user_data: "{{ lookup('file', '/tmp/tower-prep.sh') }}"
      wait: true
      exact_count: "{{ number_of_tower_systems }}"
      count_tag:
        identity: tower
      instance_tags:
        identity: tower
    register: ec2large
    
  - name: Add Tower instance public IPs to host group
    add_host: hostname={{ item.public_ip }} groups=ec2large
    with_items: "{{ ec2large.tagged_instances }}"
    
  - name: Print IP address of Ansible Tower server
    debug:
      msg: "{{ groups['ec2large'] }}"
 
   - name: Print IP addresses of Tower servers to ./tower_servers.out
    lineinfile:
      path: ./tower_servers.out
      line: "{{ item.public_ip }}"
      create: yes
    with_items: "{{ ec2large.tagged_instances }}"
    
    - name: Make sure we have a 'wheel' group
      group:
        name: wheel
        state: present

    - name: Create student user
      user:
          name: "student"
          group: wheel
          state: present
          
    - name: Set passwords for users
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication no'
        line: 'PasswordAuthentication yes'

    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: visudo -cf %s

    - name: Restart service sshd, in all cases
      service:
        name: sshd
        state: restarted
  
    - name: Enable EPEL yum repo
      yum:
        name: http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
        state: present

    - name: Install Python Pip
      yum:
        name: python2-pip
        state: present

    - name: Check if Ansible Lint is installed
      stat:
        path: /bin/ansible-lint
      register: ansible_lint

    - name: Install Ansible Lint
      pip:
        name: ansible-lint
        state: present
      when: ansible_lint.stat.exists == False

    - name: Ensure /opt/tower is created
      file:
        path: /opt/tower
        state: directory

    - name: Unzip the latest tower software
      unarchive:
        src: "https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-latest.tar.gz"
        dest: /opt/tower
        remote_src: yes

    - name: Find installer absolute path
      shell: "ls /opt/tower/ansible-tower-setup-*/setup.sh"
      register: tower_installer_path

    - name: Find base path for installer
      shell: "find /opt/tower/ansible-tower-setup* -maxdepth 0 -type d"
      register: tower_base_path

    - name: Find inventory absolute path
      shell: "ls /opt/tower/ansible-tower-setup-*/inventory"
      register: tower_inventory_path

    - name: Print installer path
      debug:
         msg: "setup path: {{ tower_installer_path.stdout }}"

    - name: Inventory path
      debug:
        msg: "inventory path: {{ tower_inventory_path.stdout }}"

    - name: Base path
      debug:
        msg: "Base path: {{ tower_base_path.stdout }}"

    - name: Set admin password in inventory file
      lineinfile:
        path: "{{ tower_inventory_path.stdout }}"
        regexp: '^admin_password='
        line: 'admin_password=redhat123'

    - name: Set PostgreSQL password in inventory file
      lineinfile:
        path: "{{ tower_inventory_path.stdout }}"
        regexp: '^pg_password='
        line: 'pg_password=redhat123'

    - name: Set rabbitmq password in inventory file
      lineinfile:
        path: "{{ tower_inventory_path.stdout }}"
        regexp: '^rabbitmq_password='
        line: 'rabbitmq_password=redhat123'

    - name: Run Ansible Tower installer
      shell: "{{tower_installer_path.stdout}} -i {{tower_inventory_path.stdout}}"

    - name: Check if Tower CLI is installed
      stat:
        path: /bin/tower-cli
      register: tower_cli

    - name: Install Tower CLI
      pip:
        name: ansible-tower-cli
        state: present
      when: tower_cli.stat.exists == False

    - name: Fetch backup
      get_url:
        url: https://github.com/mglantz/ansible-roadshow/raw/master/content/tower-backup.tar.gz
        dest: "{{ tower_base_path.stdout }}/tower-backup-latest.tar.gz"

    - name: Restore from backup
      shell: "{{tower_installer_path.stdout}} -r {{ tower_base_path.stdout }}/tower-backup-latest.tar.gz"
      
    - name: Disable SSL verification
      lineinfile:
        path: /etc/tower/settings.py
        state: present
        regexp: '.*GIT_SSL_NO_VERIFY.*'
        line: AWX_TASK_ENV['GIT_SSL_NO_VERIFY'] = 'True'
      
    - name: Restart Ansible Tower
      shell: ansible-tower-service restart
      
    - name: Git, disable SSL certificate checking. Don't do this in production!!!
      become_user: "{{ item }}"
      become: yes
      command: git config --global http.sslVerify "false"
      with_items:
        - student
        - root
        

    
    
